{"version":3,"sources":["BarAnimator.js"],"names":["StateManager","SortingManager","Utils","REGULAR_COLOR","COMPARE1_COLOR","COMPARE2_COLOR","SORTED_COLOR","BarAnimator","constructor","stateManager","this","oscillatorList","[object Object]","type","state","getState","array","getArray","dynamicSleepTime","Math","max","length","barElements","getBarElements","setState","sorting_manager","steps","bubbleSort","mergeSort","quickSort","heapSort","radixSort","step","performStep","index1","index2","indices","bar1","bar2","soundAccess","compareBars","swapBars","highlightSortedBars","replaceBars","values","start","end","i","j","style","height","sleep","finish","time","highlightBarsInRange","color","bar","highlightBar","index","backgroundColor","temp","addOscillator","freq","startTime","duration","shift","stop","audioCtx","getAudioContext","oscillator","createOscillator","gainNode","createGain","frequency","setValueAtTime","currentTime","connect","destination","gain","linearRampToValueAtTime","push","arraySize","getMute","normalizedIndex","sin","PI","now","err","console","log"],"mappings":"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","file":"BarAnimator.js","sourcesContent":["import StateManager from \"../StateManager.js\";\nimport SortingManager from \"../sorting/SortingManager.js\";\nimport Utils from \"../utils/Utils.js\";\n\nconst REGULAR_COLOR = \"#22668d\";\nconst COMPARE1_COLOR = \"hsla(355, 49%, 52%, 1)\";\nconst COMPARE2_COLOR = \"hsla(53, 98%, 65%, 1)\";\nconst SORTED_COLOR = \"hsla(79, 54%, 51%, 1)\";\n\nexport default class BarAnimator {\n    /**\n     * @param {StateManager} stateManager\n     */\n    constructor(stateManager) {\n        this.stateManager = stateManager;\n        this.oscillatorList = [];\n    }\n\n    async animateSort(type) {\n        this.state = this.stateManager.getState();\n        this.array = this.stateManager.getArray();\n        this.dynamicSleepTime = Math.max(5, 500 / this.array.length);\n        this.barElements = this.stateManager.getBarElements();\n\n        if (this.state || !this.array.length || !this.barElements.length)\n            return;\n\n        this.stateManager.setState(true);\n\n        const sorting_manager = new SortingManager(this.array);\n        let steps = [];\n\n        switch (type) {\n            case \"bubble\":\n                steps = sorting_manager.bubbleSort();\n                break;\n\n            case \"merge\":\n                steps = sorting_manager.mergeSort();\n                break;\n\n            case \"quick\":\n                steps = sorting_manager.quickSort();\n                break;\n\n            case \"heap\":\n                steps = sorting_manager.heapSort();\n                break;\n\n            case \"radix\":\n                steps = sorting_manager.radixSort();\n                break;\n        }\n\n        for (const step of steps) {\n            await this.performStep(step);\n        }\n\n        this.stateManager.setState(false);\n    }\n\n    async performStep(step) {\n        const [index1, index2] = step.indices;\n        const bar1 = this.barElements[index1];\n        const bar2 = this.barElements[index2];\n\n        if (step.type === \"compare\") {\n            this.soundAccess(index1, this.array.length);\n            await this.compareBars(bar1, bar2);\n        } else if (step.type === \"swap\") {\n            this.soundAccess(index1, this.array.length);\n            await this.swapBars(bar1, bar2);\n        } else if (step.type === \"sorted\") {\n            if (this.array.length == index2 - index1 + 1) return;\n            await this.highlightSortedBars(index1, index2, 10);\n        } else if (step.type === \"replace\") {\n            await this.replaceBars(step.indices, step.values);\n        } else if (step.type === \"finish\") {\n            await this.highlightSortedBars(index1, index2, 50);\n        }\n    }\n\n    async replaceBars(indices, values) {\n        const [start, end] = indices;\n\n        for (let i = start, j = 0; i <= end; i++, j++) {\n            this.soundAccess(i, end);\n            const bar = this.barElements[i];\n            bar.style.height = `${values[j]}px`;\n            await Utils.sleep(this.dynamicSleepTime);\n        }\n    }\n\n    async highlightSortedBars(start, finish, time) {\n        await this.highlightBarsInRange(start, finish, SORTED_COLOR);\n        await Utils.sleep(this.dynamicSleepTime * time);\n        await this.highlightBarsInRange(start, finish, REGULAR_COLOR);\n    }\n\n    async highlightBarsInRange(start, finish, color) {\n        for (let i = start; i <= finish; i++) {\n            if (\n                finish - start + 1 == this.array.length &&\n                color != REGULAR_COLOR\n            )\n                this.soundAccess(i, finish);\n            const bar = this.barElements[i];\n            await this.highlightBar(bar, color, i);\n        }\n    }\n\n    async highlightBar(bar, color, index) {\n        bar.style.backgroundColor = color;\n        await Utils.sleep(this.dynamicSleepTime);\n    }\n\n    async compareBars(bar1, bar2) {\n        bar1.style.backgroundColor = COMPARE1_COLOR;\n        bar2.style.backgroundColor = COMPARE2_COLOR;\n\n        await Utils.sleep(this.dynamicSleepTime * 5);\n\n        bar1.style.backgroundColor = REGULAR_COLOR;\n        bar2.style.backgroundColor = REGULAR_COLOR;\n    }\n\n    async swapBars(bar1, bar2) {\n        const temp = bar1.style.height;\n        bar1.style.height = bar2.style.height;\n        bar2.style.height = temp;\n        await Utils.sleep(50);\n    }\n\n    addOscillator(freq, startTime, duration) {\n        if (this.oscillatorList.length >= 512) {\n            const oldest = this.oscillatorList.shift();\n            oldest.stop();\n        }\n\n        const audioCtx = this.stateManager.getAudioContext();\n        const oscillator = audioCtx.createOscillator();\n        const gainNode = audioCtx.createGain();\n\n        oscillator.type = \"triangle\";\n        oscillator.frequency.setValueAtTime(freq, audioCtx.currentTime);\n        oscillator.connect(gainNode).connect(audioCtx.destination);\n\n        gainNode.gain.setValueAtTime(0, startTime);\n        gainNode.gain.linearRampToValueAtTime(0.06, startTime + 0.025);\n        gainNode.gain.linearRampToValueAtTime(0.05, startTime + 0.1);\n        gainNode.gain.linearRampToValueAtTime(0, startTime + duration);\n\n        oscillator.start(startTime);\n        oscillator.stop(startTime + duration);\n\n        this.oscillatorList.push(oscillator);\n    }\n\n    soundAccess(index, arraySize) {\n        if (this.stateManager.getMute()) return;\n        try {\n            const audioCtx = this.stateManager.getAudioContext();\n            const normalizedIndex = index / arraySize;\n            const freq = 120 + 1200 * Math.sin(Math.PI * normalizedIndex);\n            const now = audioCtx.currentTime;\n            const duration = 0.1;\n\n            this.addOscillator(freq, now, duration);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}\n"]}