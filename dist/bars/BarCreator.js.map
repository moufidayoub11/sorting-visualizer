{"version":3,"sources":["BarCreator.js"],"names":["StateManager","Utils","BarCreator","constructor","bars_container","default_size","stateManager","this","barsContainer","initBars","window","addEventListener","resize","getState","state","setState","innerHTML","barElements","calculateDim","array","populateArray","forEach","height","index","createBar","setArray","setBarElements","bar","document","createElement","className","id","style","setProperty","maxWidth","appendChild","push","Array","from","length","size","randomInt","maxHeight","getSize","clientHeight","Math","floor","clientWidth","min"],"mappings":"OAAOA,iBAAkB,4BAClBC,UAAW,mCAEH,MAAMC,WAOjBC,YAAYC,EAAgBC,EAAe,IAAKC,GAC5CC,KAAKD,aAAeA,EACpBC,KAAKF,aAAeA,EACpBE,KAAKC,cAAgBJ,EAMrBG,KAAKE,WAELC,OAAOC,iBAAiB,UAAU,IAAMJ,KAAKE,aAGjDG,OAAOP,EAAe,KAClBE,KAAKF,aAAeA,EAEhBE,KAAKD,aAAaO,YACtBN,KAAKE,WAGTA,WACIF,KAAKO,MAAQP,KAAKD,aAAaO,WAC3BN,KAAKO,QAETP,KAAKD,aAAaS,UAAS,GAC3BR,KAAKC,cAAcQ,UAAY,GAC/BT,KAAKU,YAAc,GAEnBV,KAAKW,eAELX,KAAKY,MAAQZ,KAAKa,gBAElBb,KAAKY,MAAME,SAAQ,CAACC,EAAQC,IAAUhB,KAAKiB,UAAUF,EAAQC,KAE7DhB,KAAKD,aAAamB,SAASlB,KAAKY,OAChCZ,KAAKD,aAAaoB,eAAenB,KAAKU,aACtCV,KAAKD,aAAaS,UAAS,IAG/BS,UAAUF,EAAQC,GACd,MAAMI,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAY,MAChBH,EAAII,GAAM,OAAMR,IAEhBI,EAAIK,MAAMC,YAAY,SAAW,GAAEX,OACnCK,EAAIK,MAAMC,YAAY,QAAU,GAAE1B,KAAK2B,aAEvC3B,KAAKC,cAAc2B,YAAYR,GAC/BpB,KAAKU,YAAYmB,KAAKT,GAG1BP,gBACI,OAAOiB,MAAMC,KAAK,CAAEC,OAAQhC,KAAKiC,OAAQ,IACrCvC,MAAMwC,UAAU,GAAIlC,KAAKmC,aAIjCxB,eACIX,KAAKiC,KAAOjC,KAAKoC,QAAQpC,KAAKF,cAC9BE,KAAKmC,UAAYnC,KAAKC,cAAcoC,aACpCrC,KAAK2B,SAAWW,KAAKC,MAAMvC,KAAKC,cAAcuC,YAAcxC,KAAKiC,MAGrEG,QAAQH,GACJ,OAAOK,KAAKG,IAAIR,EAAMK,KAAKC,MAAMvC,KAAKC,cAAcuC,YAAc","file":"BarCreator.js","sourcesContent":["import StateManager from \"../StateManager.js\";\nimport Utils from \"../utils/Utils.js\";\n\nexport default class BarCreator {\n    /**\n     *\n     * @param {HTMLElement} bars_container\n     * @param {number} default_size\n     * @param {StateManager} stateManager\n     */\n    constructor(bars_container, default_size = 100, stateManager) {\n        this.stateManager = stateManager;\n        this.default_size = default_size;\n        this.barsContainer = bars_container;\n\n        /**\n         * @type {HTMLElement[]} barElements - all bars\n         */\n\n        this.initBars();\n\n        window.addEventListener(\"resize\", () => this.initBars());\n    }\n\n    resize(default_size = 100) {\n        this.default_size = default_size;\n\n        if (this.stateManager.getState()) return;\n        this.initBars();\n    }\n\n    initBars() {\n        this.state = this.stateManager.getState();\n        if (this.state) return;\n\n        this.stateManager.setState(true);\n        this.barsContainer.innerHTML = \"\";\n        this.barElements = [];\n\n        this.calculateDim();\n\n        this.array = this.populateArray();\n\n        this.array.forEach((height, index) => this.createBar(height, index));\n\n        this.stateManager.setArray(this.array);\n        this.stateManager.setBarElements(this.barElements);\n        this.stateManager.setState(false);\n    }\n\n    createBar(height, index) {\n        const bar = document.createElement(\"div\");\n        bar.className = \"bar\";\n        bar.id = `bar-${index}`;\n\n        bar.style.setProperty(\"height\", `${height}px`);\n        bar.style.setProperty(\"width\", `${this.maxWidth}%`);\n\n        this.barsContainer.appendChild(bar);\n        this.barElements.push(bar);\n    }\n\n    populateArray() {\n        return Array.from({ length: this.size }, () =>\n            Utils.randomInt(10, this.maxHeight)\n        );\n    }\n\n    calculateDim() {\n        this.size = this.getSize(this.default_size);\n        this.maxHeight = this.barsContainer.clientHeight;\n        this.maxWidth = Math.floor(this.barsContainer.clientWidth / this.size);\n    }\n\n    getSize(size) {\n        return Math.min(size, Math.floor(this.barsContainer.clientWidth / 3));\n    }\n}\n"]}