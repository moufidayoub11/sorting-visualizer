import StateManager from"../StateManager.js";import SortingManager from"../sorting/SortingManager.js";import Utils from"../utils/Utils.js";const REGULAR_COLOR="#22668d",COMPARE1_COLOR="hsla(355, 49%, 52%, 1)",COMPARE2_COLOR="hsla(53, 98%, 65%, 1)",SORTED_COLOR="hsla(79, 54%, 51%, 1)";export default class BarAnimator{constructor(t){this.stateManager=t,this.oscillatorList=[]}async animateSort(t){if(this.state=this.stateManager.getState(),this.array=this.stateManager.getArray(),this.dynamicSleepTime=Math.max(5,500/this.array.length),this.barElements=this.stateManager.getBarElements(),this.state||!this.array.length||!this.barElements.length)return;this.stateManager.setState(!0);const e=new SortingManager(this.array);let a=[];switch(t){case"bubble":a=e.bubbleSort();break;case"merge":a=e.mergeSort();break;case"quick":a=e.quickSort();break;case"heap":a=e.heapSort();break;case"radix":a=e.radixSort()}for(const t of a)await this.performStep(t);this.stateManager.setState(!1)}async performStep(t){const[e,a]=t.indices,s=this.barElements[e],i=this.barElements[a];if("compare"===t.type)this.soundAccess(e,this.array.length),await this.compareBars(s,i);else if("swap"===t.type)this.soundAccess(e,this.array.length),await this.swapBars(s,i);else if("sorted"===t.type){if(this.array.length==a-e+1)return;await this.highlightSortedBars(e,a,10)}else"replace"===t.type?await this.replaceBars(t.indices,t.values):"finish"===t.type&&await this.highlightSortedBars(e,a,50)}async replaceBars(t,e){const[a,s]=t;for(let t=a,i=0;t<=s;t++,i++){this.soundAccess(t,s);this.barElements[t].style.height=`${e[i]}px`,await Utils.sleep(this.dynamicSleepTime)}}async highlightSortedBars(t,e,a){await this.highlightBarsInRange(t,e,SORTED_COLOR),await Utils.sleep(this.dynamicSleepTime*a),await this.highlightBarsInRange(t,e,"#22668d")}async highlightBarsInRange(t,e,a){for(let s=t;s<=e;s++){e-t+1==this.array.length&&"#22668d"!=a&&this.soundAccess(s,e);const i=this.barElements[s];await this.highlightBar(i,a,s)}}async highlightBar(t,e,a){t.style.backgroundColor=e,await Utils.sleep(this.dynamicSleepTime)}async compareBars(t,e){t.style.backgroundColor=COMPARE1_COLOR,e.style.backgroundColor=COMPARE2_COLOR,await Utils.sleep(5*this.dynamicSleepTime),t.style.backgroundColor="#22668d",e.style.backgroundColor="#22668d"}async swapBars(t,e){const a=t.style.height;t.style.height=e.style.height,e.style.height=a,await Utils.sleep(50)}addOscillator(t,e,a){if(this.oscillatorList.length>=512){this.oscillatorList.shift().stop()}const s=this.stateManager.getAudioContext(),i=s.createOscillator(),r=s.createGain();i.type="triangle",i.frequency.setValueAtTime(t,s.currentTime),i.connect(r).connect(s.destination),r.gain.setValueAtTime(0,e),r.gain.linearRampToValueAtTime(.06,e+.025),r.gain.linearRampToValueAtTime(.05,e+.1),r.gain.linearRampToValueAtTime(0,e+a),i.start(e),i.stop(e+a),this.oscillatorList.push(i)}soundAccess(t,e){if(!this.stateManager.getMute())try{const a=this.stateManager.getAudioContext(),s=t/e,i=120+1200*Math.sin(Math.PI*s),r=a.currentTime,h=.1;this.addOscillator(i,r,h)}catch(t){console.log(t)}}}
//# sourceMappingURL=BarAnimator.js.map