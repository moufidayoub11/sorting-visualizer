{"version":3,"sources":["MergeSort.js"],"names":["Sort","MergeSort","constructor","array","super","merge","left","right","leftStart","rightEnd","result","leftIndex","rightIndex","length","this","steps","push","type","indices","values","i","mergeSortHelper","middle","Math","floor","leftArray","slice","rightArray","sort"],"mappings":"OAAOA,SAAU,2BAEF,MAAMC,kBAAkBD,KACnCE,YAAYC,GACRC,MAAMD,GAGVE,MAAMC,EAAMC,EAAOC,EAAWC,GAC1B,IAAIC,EAAS,GACTC,EAAY,EACZC,EAAa,EAEjB,KAAOD,EAAYL,EAAKO,QAAUD,EAAaL,EAAMM,QACjDC,KAAKC,MAAMC,KAAK,CACZC,KAAM,UACNC,QAAS,CACLV,EAAYG,EACZF,EAAWF,EAAMM,OAASD,KAI9BN,EAAKK,GAAaJ,EAAMK,IACxBF,EAAOM,KAAKV,EAAKK,IACjBA,MAEAD,EAAOM,KAAKT,EAAMK,IAClBA,KAIR,KAAOD,EAAYL,EAAKO,QACpBH,EAAOM,KAAKV,EAAKK,IACjBA,IAGJ,KAAOC,EAAaL,EAAMM,QACtBH,EAAOM,KAAKT,EAAMK,IAClBA,IAGJE,KAAKC,MAAMC,KAAK,CACZC,KAAM,UACNC,QAAS,CAACV,EAAWC,GACrBU,OAAQT,IAGZ,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAAOG,OAAQO,IAC/BN,KAAKX,MAAMK,EAAYY,GAAKV,EAAOU,GAGvCN,KAAKC,MAAMC,KAAK,CACZC,KAAM,SACNC,QAAS,CAACV,EAAWC,KAI7BY,gBAAgBlB,EAAOG,EAAMC,GACzB,GAAID,GAAQC,EAAO,OAEnB,MAAMe,EAASC,KAAKC,OAAOlB,EAAOC,GAAS,GAE3CO,KAAKO,gBAAgBlB,EAAOG,EAAMgB,GAClCR,KAAKO,gBAAgBlB,EAAOmB,EAAS,EAAGf,GAExC,MAAMkB,EAAYtB,EAAMuB,MAAMpB,EAAMgB,EAAS,GACvCK,EAAaxB,EAAMuB,MAAMJ,EAAS,EAAGf,EAAQ,GAEnDO,KAAKT,MAAMoB,EAAWE,EAAYrB,EAAMC,GAG5CqB,OAOI,OANAd,KAAKO,gBAAgBP,KAAKX,MAAO,EAAGW,KAAKX,MAAMU,OAAS,GACxDC,KAAKC,MAAMC,KAAK,CACZC,KAAM,SACNC,QAAS,CAAC,EAAGJ,KAAKX,MAAMU,OAAS,KAG9BC,KAAKC","file":"MergeSort.js","sourcesContent":["import Sort from \"./Sort.js\";\n\nexport default class MergeSort extends Sort {\n    constructor(array) {\n        super(array);\n    }\n\n    merge(left, right, leftStart, rightEnd) {\n        let result = [];\n        let leftIndex = 0;\n        let rightIndex = 0;\n\n        while (leftIndex < left.length && rightIndex < right.length) {\n            this.steps.push({\n                type: \"compare\",\n                indices: [\n                    leftStart + leftIndex,\n                    rightEnd - right.length + rightIndex,\n                ],\n            });\n\n            if (left[leftIndex] < right[rightIndex]) {\n                result.push(left[leftIndex]);\n                leftIndex++;\n            } else {\n                result.push(right[rightIndex]);\n                rightIndex++;\n            }\n        }\n\n        while (leftIndex < left.length) {\n            result.push(left[leftIndex]);\n            leftIndex++;\n        }\n\n        while (rightIndex < right.length) {\n            result.push(right[rightIndex]);\n            rightIndex++;\n        }\n\n        this.steps.push({\n            type: \"replace\",\n            indices: [leftStart, rightEnd],\n            values: result,\n        });\n\n        for (let i = 0; i < result.length; i++) {\n            this.array[leftStart + i] = result[i];\n        }\n\n        this.steps.push({\n            type: \"sorted\",\n            indices: [leftStart, rightEnd],\n        });\n    }\n\n    mergeSortHelper(array, left, right) {\n        if (left >= right) return;\n\n        const middle = Math.floor((left + right) / 2);\n\n        this.mergeSortHelper(array, left, middle);\n        this.mergeSortHelper(array, middle + 1, right);\n\n        const leftArray = array.slice(left, middle + 1);\n        const rightArray = array.slice(middle + 1, right + 1);\n\n        this.merge(leftArray, rightArray, left, right);\n    }\n\n    sort() {\n        this.mergeSortHelper(this.array, 0, this.array.length - 1);\n        this.steps.push({\n            type: \"finish\",\n            indices: [0, this.array.length - 1],\n        });\n\n        return this.steps;\n    }\n}\n"]}